from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CallbackContext
from tinydb import TinyDB, Query
from datetime import datetime

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = TinyDB('purchases.json')
UserQuery = Query()

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫"), KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏")],
        [KeyboardButton("–ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:',
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Ü—ñ–Ω
async def show_prices(update: Update, context: CallbackContext) -> None:
    options = [
        ("Telegram Premium üíé - $4.99", 'telegram_premium'),
        ("Discord Nitro ‚ö°Ô∏è - $9.99", 'discord_nitro'),
        ("–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏ üéÆ - $19.99", 'game_cheats')
    ]
    keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∑ —Ü—ñ–Ω–æ—é:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç—É
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data

    choices = {
        'telegram_premium': {
            'description': "Telegram Premium: –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...",
            'price': "$4.99"
        },
        'discord_nitro': {
            'description': "Discord Nitro: –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º...",
            'price': "$9.99"
        },
        'game_cheats': {
            'description': "–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏: –û—Ç—Ä–∏–º–∞–π—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —á—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö —ñ–≥–æ—Ä...",
            'price': "$19.99"
        }
    }

    if data in choices:
        selected = choices[data]
        await query.edit_message_text(
            text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {data.replace('_', ' ').title()}. –¶—ñ–Ω–∞: {selected['price']}\n\n{selected['description']}"
        )

        keyboard = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç–∏", callback_data=f'buy_{data}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')],
            [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    else:
        await query.answer('–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
async def handle_purchase(update: Update, context: CallbackContext, product_choice: str) -> None:
    user_id = update.callback_query.from_user.id
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    choices = {
        'telegram_premium': {
            'description': "Telegram Premium: –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...",
            'price': "$4.99"
        },
        'discord_nitro': {
            'description': "Discord Nitro: –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º...",
            'price': "$9.99"
        },
        'game_cheats': {
            'description': "–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏: –û—Ç—Ä–∏–º–∞–π—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —á—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö —ñ–≥–æ—Ä...",
            'price': "$19.99"
        }
    }

    if product_choice in choices:
        selected = choices[product_choice]

        # –î–æ–¥–∞—î–º–æ –ø–æ–∫—É–ø–∫—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        db.insert({
            'user_id': user_id,
            'product': product_choice,
            'price': selected['price'],
            'timestamp': timestamp
        })

        await update.callback_query.message.reply_text(
            f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ {product_choice.replace('_', ' ').title()} –∑–∞ {selected['price']}!"
        )
    else:
        await update.callback_query.answer('–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä')

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫
async def view_history(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    purchases = db.search(UserQuery.user_id == user_id)

    if not purchases:
        await update.message.reply_text("–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    history_text = "–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫:\n"
    keyboard = []

    for purchase in purchases:
        product_name = purchase['product'].replace('_', ' ').title()
        history_text += f"- {product_name} ({purchase['price']}) - {purchase.get('timestamp', '–ù–µ–º–∞—î —á–∞—Å—É')}\n"
        keyboard.append([InlineKeyboardButton(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {product_name}", callback_data=purchase['product'])])

    keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(history_text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏)
async def message_handler(update: Update, context: CallbackContext) -> None:
    message_text = update.message.text
    if message_text == "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫":
        await view_history(update, context)
    elif message_text == "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏":
        await show_prices(update, context)
    elif message_text == "–ú–µ–Ω—é":
        await start(update, context)
    else:
        await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.')

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ callback-–∑–∞–ø–∏—Ç—ñ–≤ (–∫–Ω–æ–ø–∫–∏ InlineKeyboard)
async def callback_query_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    await query.answer()

    if data.startswith('buy_'):
        product_choice = data[4:]
        await handle_purchase(update, context, product_choice)
    elif data == 'back':
        await show_prices(update, context)
    elif data == 'back_to_menu':
        await start(update, context)
    else:
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç—É
        await button(update, context)
