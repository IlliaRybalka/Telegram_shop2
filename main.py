from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
from tinydb import TinyDB, Query
from datetime import datetime
import json

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫
db = TinyDB('purchases.json')
UserQuery = Query()

TOKEN = '7399033739:AAFLuTWC_dgslWXR75ZY48UCAIr9qKY9gZk'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
async def start(update: Update, context: CallbackContext) -> None:
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
    keyboard = [
        [KeyboardButton("/start"), KeyboardButton("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏"), KeyboardButton("–ú–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:', 
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ü—ñ–Ω
async def show_prices(update: Update, context: CallbackContext) -> None:
    options = [
        ("Telegram Premium üíé - $4.99", 'telegram_premium'),
        ("Discord Nitro ‚ö°Ô∏è - $9.99", 'discord_nitro'),
        ("–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏ üéÆ - $19.99", 'game_cheats')
    ]
    keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in options]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∑ —Ü—ñ–Ω–æ—é:', reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    if query:
        await query.answer()

        choices = {
            'telegram_premium': {
                'description': "Telegram Premium: –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...",
                'price': "$4.99"
            },
            'discord_nitro': {
                'description': "Discord Nitro: –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º...",
                'price': "$9.99"
            },
            'game_cheats': {
                'description': "–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏: –û—Ç—Ä–∏–º–∞–π—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —á—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö —ñ–≥–æ—Ä...",
                'price': "$19.99"
            }
        }

        choice = query.data
        if choice in choices:
            selected = choices[choice]

            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑ –∫–Ω–æ–ø–∫–æ—é "–ö—É–ø–∏—Ç–∏"
            await query.edit_message_text(
                text=f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {choice.replace('_', ' ').title()}. –¶—ñ–Ω–∞: {selected['price']}\n\n{selected['description']}",
                parse_mode='Markdown'
            )

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç–∏"
            keyboard = [
                [InlineKeyboardButton("–ö—É–ø–∏—Ç–∏", callback_data=f'buy_{choice}')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')],
                [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_reply_markup(reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
async def handle_purchase(update: Update, context: CallbackContext, product_choice: str) -> None:
    user_id = update.callback_query.from_user.id
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É —É –≤–∏–±–æ—Ä–∞—Ö
    choices = {
        'telegram_premium': {
            'description': "Telegram Premium: –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...",
            'price': "$4.99"
        },
        'discord_nitro': {
            'description': "Discord Nitro: –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º...",
            'price': "$9.99"
        },
        'game_cheats': {
            'description': "–ß—ñ—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏: –û—Ç—Ä–∏–º–∞–π—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —á—ñ—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö —ñ–≥–æ—Ä...",
            'price': "$19.99"
        }
    }

    if product_choice in choices:
        selected = choices[product_choice]

        # Use TinyDB to add purchase to the database
        db.insert({
            'user_id': user_id,
            'product': product_choice,
            'price': selected['price'],
            'timestamp': timestamp
        })

        await update.callback_query.message.reply_text(
            f"–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ {product_choice.replace('_', ' ').title()} –∑–∞ {selected['price']}!"
        )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫
async def view_history(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    purchases = db.search(UserQuery.user_id == user_id)

    if not purchases:
        await update.message.reply_text("–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    history_text = "–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫:\n"
    keyboard = []

    for purchase in purchases:
        product_name = purchase['product'].replace('_', ' ').title()
        history_text += f"- {product_name} ({purchase['price']}) - {purchase.get('timestamp', '–ù–µ–º–∞—î —á–∞—Å—É')}\n"
        keyboard.append([InlineKeyboardButton(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {product_name}", callback_data=purchase['product'])])

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_menu')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(history_text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∞–±–æ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    if update.callback_query:
        query = update.callback_query
        if query.data:  # Check if data exists
            message_text = query.data

            if message_text.startswith('buy_'):
                product_choice = message_text[4:]
                await handle_purchase(update, context, product_choice)
            elif message_text == 'back':
                await show_prices(update, context)
            elif message_text == 'back_to_menu':
                await start(update, context)
            else:
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é button –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É —Ç–æ–≤–∞—Ä—É
                await button(update, context)
        else:
            await update.callback_query.answer('–ü–æ–º–∏–ª–∫–∞: –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ')
    elif update.message:
        message_text = update.message.text
        if message_text == "–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫":
            await view_history(update, context)
        elif message_text == "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—ñ–Ω–∏":
            await show_prices(update, context)
        elif message_text == "–ú–µ–Ω—é":
            await start(update, context)
        else:
            await update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.')
    else:
        # Handle unexpected update types
        print("–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–∏–ø –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('history', view_history))

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))

    application.run_polling()

if __name__ == '__main__':
    main()
